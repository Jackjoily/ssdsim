#!/usr/local/bin/python
import sys, argparse, os, glob, matplotlib

# Hasilkan graf GC berdasarkan semua file yang ada dalam directory gc_graph_input
# fil input berformat .dat, dalam setiap file input merupakan log dari GC
# pada setiap channel atau setiap disk

INPUT_DIR = 'processing/gc_graph_input/'

def main(argv):
    if len(argv) > 0 and argv[0] == "-preprocess":
        if len(argv) < 3:
            raise ValueError("ERROR: Preprocess need log filename and output directory as the arguments")
        
        preprocess_logfile(argv[1], argv[2])
    else:
        generate_graph(argv)

    return 0

# break a gc logfile into multiple logfiles, so a logfile only contain
# gc log for certain channel
def preprocess_logfile(infile, outdir):
    logfile = open(infile, 'r')
    
    # get input log short filename
    raw_infile = infile.split('/')[-1]
    raw_infile_token = raw_infile.split('.')
    raw_infile = ""
    for token in raw_infile_token:
        raw_infile += token
    
    output_files = {}
    for line in logfile:
        line_token = line.split()
        channel = line_token[0]
        if channel in output_files:
            output_files[channel].write(line)
        else:
            output_files[channel] = open("{0}{1}_{2}.dat".format(outdir, raw_infile, channel), 'w+')
            output_files[channel].write(line)
        
    for _, value in output_files.items():
        value.close()
    logfile.close()

# generate the graph from all logfiles in log_directory
def generate_graph(argv):
    # optional args: log_directory, graph_title, start_time, end_time)

    parser = argparse.ArgumentParser()
    parser.add_argument('log_directory')

    # read all file in input directory
    log_files = glob.glob(INPUT_DIR + '*.dat')

    if len(log_files) == 0 :
        raise ValueError("ERROR: Whether input directory doesn't exist or empty!")

    # creating the graph
    
    return 0

if __name__ == "__main__":
    main(sys.argv[1:])